#ifndef __VM_CODE_H
#define __VM_CODE_H
enum OP_CODES {
  OP_STORE=0x1, // ! = 1
  OP_CDOLL=0x2, // $ = 2
  OP_CMUL=0x3, // * = 3
  OP_CPLU=0x4, // + = 4
  OP_CMIN=0x5, // - = 5
  OP_CDOT=0x6, // . = 6
  OP_CQUO=0x7, // / = 7
  OP_DEFINE=0x8, // : = 8
  OP_DEFRET=0x9, // ; = 9
  OP_CLT=0xa, // < = 10
  OP_CEQ=0xb, // = = 11
  OP_CGT=0xc, // > = 12
  OP_FETCH=0xd, // @ = 13
  OP_F=0xe, // f = 14
  OP_I=0xf, // i = 15
  OP_J=0x10, // j = 16
  OP_R=0x11, // r = 17
  OP_CDOTCSTR=0x12, // ." = 18
  OP_CDOTS=0x13, // .s = 19
  OP_ZEROCLT=0x14, // 0< = 20
  OP_ZEROCEQ=0x15, // 0= = 21
  OP_TWOSTORE=0x16, // 2! = 22
  OP_TWOCMUL=0x17, // 2* = 23
  OP_TWOCPLU=0x18, // 2+ = 24
  OP_TWOCMIN=0x19, // 2- = 25
  OP_TWOCDOT=0x1a, // 2. = 26
  OP_TWOCQUO=0x1b, // 2/ = 27
  OP_TWOCLT=0x1c, // 2< = 28
  OP_TWOCEQ=0x1d, // 2= = 29
  OP_TWOCGT=0x1e, // 2> = 30
  OP_TWOFETCH=0x1f, // 2@ = 31
  OP_DEFINECMUL=0x20, // :* = 32
  OP_CGTF=0x21, // >f = 33
  OP_CGTR=0x22, // >r = 34
  OP_CR=0x23, // cr = 35
  OP_DO=0x24, // do = 36
  OP_FCGT=0x25, // f> = 37
  OP_IF=0x26, // if = 38
  OP_OR=0x27, // or = 39
  OP_RCGT=0x28, // r> = 40
  OP_SSTORE=0x29, // s! = 41
  OP_SCSTR=0x2a, // s" = 42
  OP_SFETCH=0x2b, // s@ = 43
  OP_TWOOR=0x2c, // 2or = 44
  OP_ABS=0x2d, // abs = 45
  OP_AND=0x2e, // and = 46
  OP_DUP=0x2f, // dup = 47
  OP_END=0x30, // end = 48
  OP_INP=0x31, // inp = 49
  OP_MAX=0x32, // max = 50
  OP_MIN=0x33, // min = 51
  OP_MOD=0x34, // mod = 52
  OP_ONE=0x35, // one = 53
  OP_OUT=0x36, // out = 54
  OP_ROT=0x37, // rot = 55
  OP_VAR=0x38, // var = 56
  OP_XOR=0x39, // xor = 57
  OP_CMINDUP=0x3a, // -dup = 58
  OP_TWOABS=0x3b, // 2abs = 59
  OP_TWOAND=0x3c, // 2and = 60
  OP_TWODUP=0x3d, // 2dup = 61
  OP_TWOEXT=0x3e, // 2ext = 62
  OP_TWOMAX=0x3f, // 2max = 63
  OP_TWOMIN=0x40, // 2min = 64
  OP_TWOMOD=0x41, // 2mod = 65
  OP_TWORED=0x42, // 2red = 66
  OP_TWOROT=0x43, // 2rot = 67
  OP_TWOVAR=0x44, // 2var = 68
  OP_TWOXOR=0x45, // 2xor = 69
  OP_BASE=0x46, // base = 70
  OP_DROP=0x47, // drop = 71
  OP_ELSE=0x48, // else = 72
  OP_LOAD=0x49, // load = 73
  OP_LOOP=0x4a, // loop = 74
  OP_OVER=0x4b, // over = 75
  OP_PICK=0x4c, // pick = 76
  OP_READ=0x4d, // read = 77
  OP_SAVE=0x4e, // save = 78
  OP_SEND=0x4f, // send = 79
  OP_SWAP=0x50, // swap = 80
  OP_CPLULOOP=0x51, // +loop = 81
  OP_TWODROP=0x52, // 2drop = 82
  OP_TWOOVER=0x53, // 2over = 83
  OP_TWOSWAP=0x54, // 2swap = 84
  OP_AGAIN=0x55, // again = 85
  OP_ARRAY=0x56, // array = 86
  OP_AWAIT=0x57, // await = 87
  OP_BEGIN=0x58, // begin = 88
  OP_CELLCPLU=0x59, // cell+ = 89
  OP_CONST=0x5a, // const = 90
  OP_ENDIF=0x5b, // endif = 91
  OP_FDROP=0x5c, // fdrop = 92
  OP_FPICK=0x5d, // fpick = 93
  OP_LEAVE=0x5e, // leave = 94
  OP_MINUS=0x5f, // minus = 95
  OP_SENDN=0x60, // sendn = 96
  OP_SLEEP=0x61, // sleep = 97
  OP_UNTIL=0x62, // until = 98
  OP_WHILE=0x63, // while = 99
  OP_WRITE=0x64, // write = 100
  OP_YIELD=0x65, // yield = 101
  OP_TWOMINUS=0x66, // 2minus = 102
  OP_FORGET=0x67, // forget = 103
  OP_RETURN=0x68, // return = 104
  OP_RECEIVE=0x69, // receive = 105
  OP_CALL=0x6a, // call = 106
  OP_FCALL=0x6b, // fcall = 107
  OP_BRANCH=0x6c, // branch = 108
  OP_BRANCHZ=0x6d, // branchz = 109
  OP_INDIRECT=0x6e, // indirect = 110
  OP_MULADD=0x6f, // muladd = 111
  OP_NOP=0x70, // nop = 112
  OP_LIT=0x71, // lit = 113
  OP_TWOLIT=0x72 // 2lit = 114
};
#endif
