[{"Config":{"clearAuto":true,"strictScope":false,"group":"anonymous","mode":"javascript","file":"workbook.rexavm","fontSize":16,"thisthat":true,"turbo":true,"user":"boragifa","docUrl":"localhost:5558","projUrl":"localhost:5550","webclipTime":300,"webclipUrl":"localhost:9176","webxUrl":"localhost:9177","modules":[],"workdir":"/home/sbosse/proj/DS211X/tools","nw":"0.41.3","version":"1.9.6","wex":{"http":"http://localhost:11111","ws":"ws://localhost:11112"},"strict":true,"reload":"workbook.console"}},{"Notes":[]},{},{"options":{"eval":"_PxEnUf_ZnVuY3Rpb24gKHRleHQsZW52KSB7CiAgICAgICAgICAgICBqc1Njb3BlLnJ1bih0ZXh0LGVudikKICAgICAgICAgIH0=","mode":"javascript","label":"Init","heightC":10,"heightE":30,"collapsed":false,"overlay":2,"evalUser":"undefined"},"code":"parameter {dev:\"/dev/ttyACM0\"}\nvar terminal = false\nvar fs       = require('fs');\nvar cp       = require('child_process');\nvar stat = cp.execSync('stty -brkint -icrnl -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke --file='+dev);\nstatus(stat)\nvar readstream  = fs.createReadStream(dev),\n    writestream = fs.createWriteStream(dev);\nreadstream.on('error', function(err) {\n  print(err)\n});\nif (!Math.signal) load('math.plugin');\nvar line='',buffer='',data=[], waiter;\nreadstream.on('data', function (chunk) {\n  // Code.print(chunk);\n  chunk=chunk.toString('utf8');\n  if (/[$]/.test(chunk) || buffer.length) {\n    // contains data tokens\n    buffer+=chunk;\n    chunk='';\n    for(var i=0;i<buffer.length;i++) {\n      if (buffer.charAt(i)=='$') {\n        // get four digits?\n        if (buffer.length>(i+4)) {\n          data.push(Number('0x'+buffer.slice(i+1,i+5)));\n          i+=4;\n        } else { buffer=buffer.slice(i); return; /* pending data */}\n      } else chunk+=buffer.slice(i,i+1);\n    }\n    buffer='';\n    // print('data',data);\n    if (waiter && data.length >= waiter.length) {\n      waiter.callback(data);\n      waiter=null;\n    }\n  }\n  line += chunk;\n  if (line.indexOf('\\n')!=-1) {\n    var parts = line.split('\\n');\n    for(i=0;i<Math.max(1,parts.length-1);i++) {\n      if (parts[i]) {\n        if (!terminal) Code.print(parts[i]);\n        else Terminal.print('terminal0',parts[i]);\n      }\n    }\n    line=parts[i]?parts[i]:'';\n  }\n});\nasync function run(code,rcvdata) {\n  terminal=false;\n  code=code.replace(/\\n/g,'\\r');\n  code += '\\n';\n  return new Promise(function (resolve) {\n    if (rcvdata) {\n      data=[];\n      waiter= {\n        length   : rcvdata,\n        callback : resolve\n      }\n    }\n    writestream.write(code+'\\n','ascii');\n    if (!rcvdata) resolve();\n  })\n}\nCode.callbacks['run']=function (code,print,error) { \n  // Code.print('Send: '+line);\n  terminal=false;\n  code=code.replace(/\\n/g,'\\r');\n  writestream.write(code+'\\n','ascii');\n}\n\nTerminal.callbacks['rl']=function (line,print,error) { \n  // Code.print('Send: '+line);\n  terminal=true;\n  writestream.write(line+'\\n','ascii');\n}\n\nTerminal.print('terminal0','Serial REXAVM Console Ready.')\n\n\nexport { fs,dev, run, readstream, writestream }"},{"options":{"collapsed":false,"run":true},"text":"## Info\n\n- Disable modem manager:\n\n```\n  sudo systemctl stop ModemManager.service\n```"},{"options":{"label":"terminal0","height":20,"evalUser":"rl"},"shell":true},{"options":{"eval":"_PxEnUf_ZnVuY3Rpb24gKHRleHQsZW52KSB7CiAgICAgICAgICAgICBqc1Njb3BlLnJ1bih0ZXh0LGVudikKICAgICAgICAgIH0=","mode":"javascript","label":"Run Code","heightC":30,"heightE":10,"collapsed":false,"overlay":1,"evalUser":"run"},"code":"( One CNN convolution )\n( [50,5,1] k=[5,5] pad=2 stride=2  filters=3 )\narray input  250\narray kernel1 { 1 2 3 4 5\n                6 7 8 9 0\n                1 2 3 4 5\n                6 7 8 9 0\n                1 2 3 4 5 }\narray kernel2 { 1 2 3 4 5\n                6 7 8 9 0\n                1 2 3 4 5\n                6 7 8 9 0\n                1 2 3 4 5 }\narray kernel3 { 1 2 3 4 5\n                6 7 8 9 0\n                1 2 3 4 5\n                6 7 8 9 0\n                1 2 3 4 5 }\n( [25,3,3] )\narray convout 75\n\n( [12,1,3] k=[2,2] stride=2 filters=3 )\narray poolou1 12\narray poolou2 12\narray poolou3 12\n\narray wghta1 { \n1 2 3 4 5 6 7 8 9 0 1 2 3 4\n}\narray wghta2 { \n1 2 3 4 5 6 7 8 9 0 1 2 3 4\n}\narray wghta3 { \n1 2 3 4 5 6 7 8 9 0 1 2 3 4\n}\n\narray wghtb1 { \n1 2 3 4 5 6 7 8 9 0 1 2 3 4\n}\narray wghtb2 { \n1 2 3 4 5 6 7 8 9 0 1 2 3 4\n}\narray wghtb3 { \n1 2 3 4 5 6 7 8 9 0 1 2 3 4\n}\n\narray bias2 { -766 -703 }\narray output 2\n\narray accu 250\n\narray scalea1 {\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n}\narray scalea2 {\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n}\narray scalea3 {\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n}\n\narray scaleb1 {\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n}\narray scaleb2 {\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n}\narray scaleb3 {\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n}\n: cnnfw\n  input kernel1 convout 1 50 5 2 2 vecconv\n  convout convout $ sigmoid 0 vecmap\n  convout 256 2 + poolou1 1 25 -2 2 0 vecconv\n  input kernel2 convout 1 50 5 2 2 vecconv\n  convout convout $ sigmoid 0 vecmap  \n  convout 256 2 + poolou2 1 25 -2 2 0 vecconv\n  input kernel3 convout 1 50 5 2 2 vecconv\n  convout convout $ sigmoid 0 vecmap  \n  convout 256 2 + poolou3 1 25 -2 2 0 vecconv\n  \n  poolou1 wghta1 accu scalea1 vecmul\n  accu 0 250 8 vecreduce\n  poolou2 wghta2 accu scalea2 vecmul\n  accu 0 250 8 vecreduce\n  poolou3 wghta3 accu scalea3 vecmul\n  accu 0 250 8 vecreduce\n  \n  2+ 2+ 445l 2/ 2red sigmoid drop\n  \n  poolou1 wghtb1 accu scaleb1 vecmul\n  accu 0 250 8 vecreduce\n  poolou2 wghtb2 accu scaleb2 vecmul\n  accu 0 250 8 vecreduce \n  poolou3 wghtb3 accu scaleb3 vecmul\n  accu 0 250 8 vecreduce \n  \n  2+ 2+ 312l 2/ 2red sigmoid drop\n;\n2var counter\n0 counter !\n.\" Test \" cr\nmilli >f >f\n100 0 do\n  10 0 do\n    cnnfw\n    counter 2@ 1l 2+ counter 2!\n  loop\nloop\nmilli f> f> 2-\ncounter 2@ 2. .\" loops \" cr\n1000l 2* 2dup 2. .\" us  \" 2dup 1000l 2/ 2. .\" ms tot. \" cr\n2dup counter 2@ 1000l 2/ 2/ 2. .\" ns/cnnfw \" cr\nreset"}]